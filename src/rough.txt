// File Structure:
gymmy-app/
├── package.json
├── tailwind.config.js
├── next.config.js
├── tsconfig.json
├── public/
│   └── favicon.ico
├── src/
│   ├── app/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── page.tsx (Landing Page)
│   │   ├── auth/
│   │   │   └── page.tsx (Authentication Page)
│   │   ├── home/
│   │   │   └── page.tsx (Home Page)
│   │   └── dashboard/
│   │       ├── page.tsx
│   │       ├── workouts/
│   │       │   └── page.tsx
│   │       ├── nutrition/
│   │       │   └── page.tsx
│   │       ├── progress/
│   │       │   └── page.tsx
│   │       └── profile/
│   │           └── page.tsx
│   ├── components/
│   │   ├── ui/
│   │   │   ├── Button.tsx
│   │   │   ├── Input.tsx
│   │   │   ├── Card.tsx
│   │   │   └── Modal.tsx
│   │   ├── layout/
│   │   │   ├── Header.tsx
│   │   │   ├── Navigation.tsx
│   │   │   └── Footer.tsx
│   │   ├── fitness/
│   │   │   ├── GoalCard.tsx
│   │   │   ├── WorkoutCard.tsx
│   │   │   ├── ProgressChart.tsx
│   │   │   └── MetricsForm.tsx
│   │   └── icons/
│   │       ├── FitnessIcons.tsx
│   │       └── CharacterIcons.tsx
│   ├── hooks/
│   │   ├── useAuth.ts
│   │   ├── useGoals.ts
│   │   └── useProgress.ts
│   ├── lib/
│   │   ├── auth.ts
│   │   ├── database.ts
│   │   └── utils.ts
│   ├── types/
│   │   ├── auth.ts
│   │   ├── fitness.ts
│   │   └── user.ts
│   └── store/
│       ├── authStore.ts
│       ├── fitnessStore.ts
│       └── index.ts

// ==============================================
// package.json
// ==============================================
{
  "name": "gymmy-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "^18",
    "react-dom": "^18",
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "tailwindcss": "^3.3.0",
    "autoprefixer": "^10.0.1",
    "postcss": "^8",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "14.0.0"
  }
}

// ==============================================
// tailwind.config.js
// ==============================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#fef7ff',
          100: '#fdeeff',
          200: '#fcd4ff',
          300: '#fab1ff',
          400: '#f67eff',
          500: '#ed4bff',
          600: '#d929e8',
          700: '#b61bc4',
          800: '#9618a0',
          900: '#7a1a83',
        },
        secondary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        cute: {
          pink: '#ff6b9d',
          peach: '#ffb347',
          mint: '#98fb98',
          lavender: '#dda0dd',
          sky: '#87ceeb',
        }
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
        cute: ['Comic Sans MS', 'cursive'],
      },
      animation: {
        'bounce-soft': 'bounce 2s infinite',
        'pulse-slow': 'pulse 3s infinite',
        'wiggle': 'wiggle 1s ease-in-out infinite',
      },
      keyframes: {
        wiggle: {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        }
      }
    },
  },
  plugins: [],
}

// ==============================================
// src/app/globals.css
// ==============================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

.cute-gradient {
  background: linear-gradient(135deg, #ff6b9d, #ffb347, #98fb98);
}

.glass-effect {
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

// ==============================================
// src/types/fitness.ts
// ==============================================
export interface Goal {
  id: string;
  title: string;
  type: 'weight-loss' | 'muscle-gain' | 'endurance' | 'flexibility' | 'general-fitness';
  targetValue: number;
  currentValue: number;
  unit: string;
  deadline: Date;
  createdAt: Date;
  isCompleted: boolean;
  points: number;
}

export interface WorkoutPlan {
  id: string;
  goalId: string;
  name: string;
  exercises: Exercise[];
  duration: number;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  daysPerWeek: number;
}

export interface Exercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  duration?: number;
  restTime: number;
  instructions: string[];
}

export interface NutritionPlan {
  id: string;
  goalId: string;
  dailyCalories: number;
  macros: {
    protein: number;
    carbs: number;
    fat: number;
  };
  meals: Meal[];
}

export interface Meal {
  id: string;
  name: string;
  calories: number;
  time: string;
  foods: Food[];
}

export interface Food {
  id: string;
  name: string;
  calories: number;
  quantity: string;
}

export interface UserMetrics {
  weight: number;
  height: number;
  age: number;
  gender: 'male' | 'female' | 'other';
  activityLevel: 'sedentary' | 'lightly-active' | 'moderately-active' | 'very-active' | 'extremely-active';
  bodyFatPercentage?: number;
  muscleMass?: number;
}

// ==============================================
// src/types/auth.ts
// ==============================================
export interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  metrics?: UserMetrics;
  totalPoints: number;
  level: number;
  joinedAt: Date;
}

export interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
}

// ==============================================
// src/components/icons/CharacterIcons.tsx
// ==============================================
import React from 'react';

export const CuteRobotIcon = ({ className = "w-8 h-8" }: { className?: string }) => (
  <svg className={className} viewBox="0 0 100 100" fill="none">
    <circle cx="50" cy="40" r="25" fill="#ff6b9d" />
    <circle cx="43" cy="35" r="3" fill="white" />
    <circle cx="57" cy="35" r="3" fill="white" />
    <path d="M45 45 Q50 50 55 45" stroke="white" strokeWidth="2" fill="none" />
    <rect x="40" y="60" width="20" height="25" rx="5" fill="#ffb347" />
    <rect x="35" y="45" width="8" height="15" rx="4" fill="#98fb98" />
    <rect x="57" y="45" width="8" height="15" rx="4" fill="#98fb98" />
    <circle cx="35" cy="20" r="3" fill="#dda0dd" />
    <circle cx="65" cy="20" r="3" fill="#dda0dd" />
    <line x1="38" y1="20" x2="42" y2="30" stroke="#dda0dd" strokeWidth="2" />
    <line x1="62" y1="20" x2="58" y2="30" stroke="#dda0dd" strokeWidth="2" />
  </svg>
);

export const FitnessCharacterIcon = ({ type, className = "w-12 h-12" }: { type: string, className?: string }) => {
  const getCharacter = () => {
    switch (type) {
      case 'weight-loss':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <ellipse cx="50" cy="35" rx="18" ry="20" fill="#ff6b9d" />
            <circle cx="44" cy="30" r="2" fill="white" />
            <circle cx="56" cy="30" r="2" fill="white" />
            <path d="M46 38 Q50 42 54 38" stroke="white" strokeWidth="2" fill="none" />
            <ellipse cx="50" cy="65" rx="15" ry="20" fill="#ffb347" />
            <rect x="35" y="50" width="6" height="20" rx="3" fill="#98fb98" />
            <rect x="59" y="50" width="6" height="20" rx="3" fill="#98fb98" />
            <rect x="45" y="80" width="4" height="12" rx="2" fill="#87ceeb" />
            <rect x="51" y="80" width="4" height="12" rx="2" fill="#87ceeb" />
            <circle cx="35" cy="25" r="2" fill="#dda0dd" />
            <path d="M37 25 Q42 20 45 28" stroke="#dda0dd" strokeWidth="1.5" fill="none" />
          </svg>
        );
      case 'muscle-gain':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="35" r="18" fill="#ff6b9d" />
            <circle cx="45" cy="30" r="2" fill="white" />
            <circle cx="55" cy="30" r="2" fill="white" />
            <path d="M47 38 Q50 41 53 38" stroke="white" strokeWidth="2" fill="none" />
            <ellipse cx="50" cy="65" rx="20" ry="18" fill="#ffb347" />
            <ellipse cx="32" cy="55" rx="8" ry="12" fill="#98fb98" />
            <ellipse cx="68" cy="55" rx="8" ry="12" fill="#98fb98" />
            <rect x="46" y="80" width="8" height="15" rx="4" fill="#87ceeb" />
            <circle cx="30" cy="45" r="4" fill="#dda0dd" />
            <circle cx="70" cy="45" r="4" fill="#dda0dd" />
          </svg>
        );
      case 'endurance':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="30" r="15" fill="#ff6b9d" />
            <circle cx="46" cy="27" r="2" fill="white" />
            <circle cx="54" cy="27" r="2" fill="white" />
            <path d="M47 32 Q50 35 53 32" stroke="white" strokeWidth="1.5" fill="none" />
            <ellipse cx="50" cy="55" rx="12" ry="15" fill="#ffb347" />
            <rect x="38" y="45" width="5" height="18" rx="2.5" fill="#98fb98" transform="rotate(-15 40.5 54)" />
            <rect x="57" y="45" width="5" height="18" rx="2.5" fill="#98fb98" transform="rotate(15 59.5 54)" />
            <rect x="46" y="68" width="4" height="15" rx="2" fill="#87ceeb" transform="rotate(-10 48 75.5)" />
            <rect x="50" y="68" width="4" height="15" rx="2" fill="#87ceeb" transform="rotate(10 52 75.5)" />
            <circle cx="45" cy="15" r="3" fill="#98fb98" />
            <circle cx="55" cy="15" r="3" fill="#98fb98" />
            <path d="M45 18 Q50 25 55 18" stroke="#98fb98" strokeWidth="2" fill="none" />
          </svg>
        );
      default:
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="35" r="16" fill="#ff6b9d" />
            <circle cx="45" cy="31" r="2" fill="white" />
            <circle cx="55" cy="31" r="2" fill="white" />
            <path d="M46 38 Q50 42 54 38" stroke="white" strokeWidth="2" fill="none" />
            <rect x="42" y="50" width="16" height="20" rx="8" fill="#ffb347" />
            <rect x="37" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="57" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="46" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <rect x="51" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <circle cx="45" cy="18" r="2" fill="#dda0dd" />
            <circle cx="55" cy="18" r="2" fill="#dda0dd" />
            <path d="M45 20 Q50 15 55 20" stroke="#dda0dd" strokeWidth="2" fill="none" />
          </svg>
        );
    }
  };

  return getCharacter();
};

// ==============================================
// src/app/layout.tsx
// ==============================================
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'GymMy - Your Cute Personal Trainer',
  description: 'Gamified fitness journey with personalized workouts and nutrition plans',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}

// ==============================================
// src/app/page.tsx (Landing Page)
// ==============================================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { CuteRobotIcon } from '@/components/icons/CharacterIcons';

export default function LandingPage() {
  const [isVisible, setIsVisible] = useState(false);
  const router = useRouter();

  useEffect(() => {
    setIsVisible(true);
  }, []);

  const handleGetStarted = () => {
    router.push('/auth');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-cute-pink via-cute-peach to-cute-lavender overflow-hidden">
      {/* Floating Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-10 w-16 h-16 bg-cute-mint rounded-full opacity-20 animate-bounce-soft"></div>
        <div className="absolute top-40 right-20 w-12 h-12 bg-cute-sky rounded-full opacity-30 animate-pulse-slow"></div>
        <div className="absolute bottom-40 left-20 w-20 h-20 bg-white rounded-full opacity-15 animate-bounce-soft"></div>
        <div className="absolute bottom-20 right-10 w-14 h-14 bg-cute-lavender rounded-full opacity-25 animate-pulse-slow"></div>
      </div>

      {/* Header */}
      <header className="relative py-6 px-6">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <CuteRobotIcon className="w-12 h-12 animate-wiggle" />
            <h1 className="text-3xl font-bold text-white font-cute">GymMy</h1>
          </div>
          <button
            onClick={handleGetStarted}
            className="bg-white text-cute-pink px-6 py-3 rounded-full font-semibold hover:bg-opacity-90 transition-all duration-300 hover:scale-105 shadow-lg"
          >
            Get Started
          </button>
        </div>
      </header>

      {/* Main Content */}
      <main className="relative">
        <div className="max-w-7xl mx-auto px-6 py-20">
          <div className={`text-center transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
            {/* Hero Section */}
            <div className="mb-16">
              <div className="flex justify-center mb-8">
                <CuteRobotIcon className="w-32 h-32 animate-bounce-soft" />
              </div>
              
              <h2 className="text-6xl md:text-8xl font-bold text-white mb-6 font-cute">
                Meet Your
                <br />
                <span className="text-cute-sky">Cute Trainer!</span>
              </h2>
              
              <p className="text-xl md:text-2xl text-white opacity-90 mb-12 max-w-3xl mx-auto leading-relaxed">
                Transform your fitness journey with personalized workouts, nutrition plans, and gamified achievements. 
                Your adorable AI trainer is here to make fitness fun! 🎯
              </p>

              <div className="flex flex-col sm:flex-row gap-6 justify-center items-center">
                <button
                  onClick={handleGetStarted}
                  className="bg-white text-cute-pink px-10 py-4 rounded-full text-xl font-bold hover:bg-opacity-90 transition-all duration-300 hover:scale-105 shadow-2xl"
                >
                  Start Your Journey 🚀
                </button>
                <button className="text-white border-2 border-white px-10 py-4 rounded-full text-xl font-semibold hover:bg-white hover:text-cute-pink transition-all duration-300 hover:scale-105">
                  Learn More
                </button>
              </div>
            </div>

            {/* Features Grid */}
            <div className="grid md:grid-cols-3 gap-8 mt-20">
              <div className="glass-effect p-8 rounded-3xl text-center hover:scale-105 transition-all duration-300">
                <div className="text-6xl mb-4">🎯</div>
                <h3 className="text-2xl font-bold text-white mb-4">Personalized Goals</h3>
                <p className="text-white opacity-80">Set custom fitness goals and get tailored workout plans just for you!</p>
              </div>
              
              <div className="glass-effect p-8 rounded-3xl text-center hover:scale-105 transition-all duration-300">
                <div className="text-6xl mb-4">🏆</div>
                <h3 className="text-2xl font-bold text-white mb-4">Gamified Experience</h3>
                <p className="text-white opacity-80">Earn points, unlock achievements, and level up your fitness game!</p>
              </div>
              
              <div className="glass-effect p-8 rounded-3xl text-center hover:scale-105 transition-all duration-300">
                <div className="text-6xl mb-4">📊</div>
                <h3 className="text-2xl font-bold text-white mb-4">Smart Tracking</h3>
                <p className="text-white opacity-80">Visualize your progress with beautiful charts and analytics!</p>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="relative py-8 text-center">
        <p className="text-white opacity-60">
          Made with 💖 by GymMy Team
        </p>
      </footer>
    </div>
  );
}

// ==============================================
// src/app/auth/page.tsx (Authentication Page)
// ==============================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { CuteRobotIcon } from '@/components/icons/CharacterIcons';

interface FormData {
  name: string;
  email: string;
  password: string;
  confirmPassword?: string;
}

export default function AuthPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Mock authentication - in real app, this would be actual auth
    localStorage.setItem('gymmy_user', JSON.stringify({
      id: '1',
      name: formData.name || 'User',
      email: formData.email,
      totalPoints: 0,
      level: 1,
      joinedAt: new Date().toISOString()
    }));

    setIsLoading(false);
    router.push('/home');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-cute-pink via-cute-peach to-cute-lavender flex items-center justify-center p-6">
      {/* Floating Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-10 w-16 h-16 bg-cute-mint rounded-full opacity-20 animate-bounce-soft"></div>
        <div className="absolute top-40 right-20 w-12 h-12 bg-cute-sky rounded-full opacity-30 animate-pulse-slow"></div>
        <div className="absolute bottom-40 left-20 w-20 h-20 bg-white rounded-full opacity-15 animate-bounce-soft"></div>
        <div className="absolute bottom-20 right-10 w-14 h-14 bg-cute-lavender rounded-full opacity-25 animate-pulse-slow"></div>
      </div>

      <div className="relative w-full max-w-md">
        <div className="glass-effect p-8 rounded-3xl shadow-2xl">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <CuteRobotIcon className="w-20 h-20 animate-bounce-soft" />
            </div>
            <h1 className="text-3xl font-bold text-white font-cute">
              {isLogin ? 'Welcome Back!' : 'Join GymMy!'}
            </h1>
            <p className="text-white opacity-80 mt-2">
              {isLogin ? 'Ready to continue your fitness journey?' : 'Start your cute fitness adventure!'}
            </p>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {!isLogin && (
              <div>
                <label className="block text-white font-medium mb-2">Name</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none transition-all duration-300"
                  placeholder="Your cute name"
                  required={!isLogin}
                />
              </div>
            )}

            <div>
              <label className="block text-white font-medium mb-2">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none transition-all duration-300"
                placeholder="your@email.com"
                required
              />
            </div>

            <div>
              <label className="block text-white font-medium mb-2">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none transition-all duration-300"
                placeholder="••••••••"
                required
              />
            </div>

            {!isLogin && (
              <div>
                <label className="block text-white font-medium mb-2">Confirm Password</label>
                <input
                  type="password"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none transition-all duration-300"
                  placeholder="••••••••"
                  required={!isLogin}
                />
              </div>
            )}

            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-white text-cute-pink py-4 rounded-xl font-bold text-lg hover:bg-opacity-90 transition-all duration-300 hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-cute-pink mr-2"></div>
                  Processing...
                </div>
              ) : (
                isLogin ? 'Login 🚀' : 'Sign Up 🎉'
              )}
            </button>
          </form>

          {/* Toggle Form */}
          <div className="text-center mt-6">
            <p className="text-white opacity-80">
              {isLogin ? "Don't have an account? " : "Already have an account? "}
              <button
                onClick={() => setIsLogin(!isLogin)}
                className="text-cute-sky font-semibold hover:underline transition-all duration-300"
              >
                {isLogin ? 'Sign Up' : 'Login'}
              </button>
            </p>
          </div>

          {/* Social Login (Optional) */}
          <div className="mt-8 pt-6 border-t border-white border-opacity-20">
            <p className="text-center text-white opacity-60 text-sm mb-4">Or continue with</p>
            <div className="flex space-x-4">
              <button className="flex-1 bg-white bg-opacity-10 text-white py-3 rounded-xl font-medium hover:bg-opacity-20 transition-all duration-300">
                Google
              </button>
              <button className="flex-1 bg-white bg-opacity-10 text-white py-3 rounded-xl font-medium hover:bg-opacity-20 transition-all duration-300">
                Apple
              </button>
            </div>
          </div>
        </div>

        {/* Back to Landing */}
        <div className="text-center mt-6">
          <button
            onClick={() => router.push('/')}
            className="text-white opacity-70 hover:opacity-100 transition-all duration-300"
          >
            ← Back to Home
          </button>
        </div>
      </div>
    </div>
  );
}

// ==============================================
// src/app/home/page.tsx (Home Page)
// ==============================================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { CuteRobotIcon, FitnessCharacterIcon } from '@/components/icons/CharacterIcons';
import { Goal } from '@/types/fitness';

export default function HomePage() {
  const [user, setUser] = useState<any>(null);
  const [goals, setGoals] = useState<Goal[]>([]);
  const [showNewGoalModal, setShowNewGoalModal] = useState(false);
  const [newGoal, setNewGoal] = useState({
    title: '',
    type: 'weight-loss' as Goal['type'],
    targetValue: '',
    unit: 'kg',
    deadline: '',
  });
  const router = useRouter();

  useEffect(() => {
    // Check authentication
    const userData = localStorage.getItem('gymmy_user');
    if (!userData) {
      router.push('/auth');
      return;
    }
    
    setUser(JSON.parse(userData));
    
    // Load existing goals
    const savedGoals = localStorage.getItem('gymmy_goals');
    if (savedGoals) {
      setGoals(JSON.parse(savedGoals));
    }
  }, [router]);

  const handleCreateGoal = (e: React.FormEvent) => {
    e.preventDefault();
    
    const goal: Goal = {
      id: Date.now().toString(),
      title: newGoal.title,
      type: newGoal.type,
      targetValue: parseFloat(newGoal.targetValue),
      currentValue: 0,
      unit: newGoal.unit,
      deadline: new Date(newGoal.deadline),
      createdAt: new Date(),
      isCompleted: false,
      points: getPointsForGoalType(newGoal.type),
    };

    const updatedGoals = [goal, ...goals];
    setGoals(updatedGoals);
    localStorage.setItem('gymmy_goals', JSON.stringify(updatedGoals));
    
    // Reset form
    setNewGoal({
      title: '',
      type: 'weight-loss',
      targetValue: '',
      unit: 'kg',
      deadline: '',
    });
    setShowNewGoalModal(false);
  };

  const getPointsForGoalType = (type: Goal['type']): number => {
    const pointsMap = {
      'weight-loss': 100,
      'muscle-gain': 120,
      'endurance': 90,
      'flexibility': 80,
      'general-fitness': 85,
    };
    return pointsMap[type];
  };

  const getGoalTypeLabel = (type: Goal['type']): string => {
    const labels = {
      'weight-loss': 'Weight Loss',
      'muscle-gain': 'Muscle Gain',
      'endurance': 'Endurance',
      'flexibility': 'Flexibility',
      'general-fitness': 'General Fitness',
    };
    return labels[type];
  };

  const getProgressPercentage = (goal: Goal): number => {
    if (goal.targetValue === 0) return 0;
    return Math.min((goal.currentValue / goal.targetValue) * 100, 100);
  };

  const getDaysRemaining = (deadline: Date): number => {
    const today = new Date();
    const timeDiff = deadline.getTime() - today.getTime();
    return Math.ceil(timeDiff / (1000 * 3600 * 24));
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-cute-pink via-cute-peach to-cute-lavender flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-white"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-cute-pink via-cute-peach to-cute-lavender">
      {/* Floating Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-10 w-16 h-16 bg-cute-mint rounded-full opacity-20 animate-bounce-soft"></div>
        <div className="absolute top-40 right-20 w-12 h-12 bg-cute-sky rounded-full opacity-30 animate-pulse-slow"></div>
        <div className="absolute bottom-40 left-20 w-20 h-20 bg-white rounded-full opacity-15 animate-bounce-soft"></div>
        <div className="absolute bottom-20 right-10 w-14 h-14 bg-cute-lavender rounded-full opacity-25 animate-pulse-slow"></div>
      </div>

      {/* Header */}
      <header className="relative py-6 px-6 bg-white bg-opacity-10 backdrop-blur-lg">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <CuteRobotIcon className="w-12 h-12 animate-wiggle" />
            <div>
              <h1 className="text-2xl font-bold text-white font-cute">GymMy</h1>
              <p className="text-white opacity-80">Hey {user.name}! 👋</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-white">{user.totalPoints || 0}</div>
              <div className="text-white opacity-70 text-sm">Points</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-white">Level {user.level || 1}</div>
              <div className="text-white opacity-70 text-sm">Trainer</div>
            </div>
            <button
              onClick={() => router.push('/auth')}
              className="bg-white bg-opacity-20 text-white px-4 py-2 rounded-full hover:bg-opacity-30 transition-all duration-300"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="relative max-w-7xl mx-auto px-6 py-8">
        {/* Welcome Section */}
        <div className="text-center mb-12">
          <h2 className="text-4xl md:text-6xl font-bold text-white mb-4 font-cute">
            Your Fitness Journey
          </h2>
          <p className="text-xl text-white opacity-90 mb-8">
            Ready to crush some goals today? Let's make it happen! 💪
          </p>
        </div>

        {/* New Goal Button */}
        <div className="mb-8">
          <button
            onClick={() => setShowNewGoalModal(true)}
            className="w-full glass-effect p-8 rounded-3xl border-2 border-dashed border-white border-opacity-40 hover:border-opacity-60 hover:bg-white hover:bg-opacity-10 transition-all duration-300 group"
          >
            <div className="text-center">
              <div className="text-6xl mb-4 group-hover:animate-bounce">✨</div>
              <h3 className="text-2xl font-bold text-white mb-2">Create New Goal</h3>
              <p className="text-white opacity-70">Start a new fitness adventure!</p>
            </div>
          </button>
        </div>

        {/* Goals Grid */}
        {goals.length > 0 && (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {goals.map((goal) => (
              <div
                key={goal.id}
                className="glass-effect p-6 rounded-3xl hover:scale-105 transition-all duration-300 cursor-pointer"
              >
                <div className="flex items-center justify-between mb-4">
                  <FitnessCharacterIcon type={goal.type} className="w-16 h-16" />
                  <div className="text-right">
                    <div className="text-2xl font-bold text-white">+{goal.points}</div>
                    <div className="text-white opacity-70 text-sm">points</div>
                  </div>
                </div>
                
                <h3 className="text-xl font-bold text-white mb-2">{goal.title}</h3>
                <p className="text-cute-sky font-medium mb-4">{getGoalTypeLabel(goal.type)}</p>
                
                {/* Progress Bar */}
                <div className="mb-4">
                  <div className="flex justify-between text-white text-sm mb-2">
                    <span>{goal.currentValue} / {goal.targetValue} {goal.unit}</span>
                    <span>{getProgressPercentage(goal).toFixed(1)}%</span>
                  </div>
                  <div className="w-full bg-white bg-opacity-20 rounded-full h-3">
                    <div
                      className="bg-cute-sky h-3 rounded-full transition-all duration-500"
                      style={{ width: `${getProgressPercentage(goal)}%` }}
                    ></div>
                  </div>
                </div>
                
                {/* Deadline */}
                <div className="flex items-center justify-between text-white opacity-70 text-sm">
                  <span>
                    {getDaysRemaining(new Date(goal.deadline)) > 0
                      ? `${getDaysRemaining(new Date(goal.deadline))} days left`
                      : 'Overdue'}
                  </span>
                  <span>{goal.isCompleted ? '✅ Completed' : '🎯 In Progress'}</span>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Empty State */}
        {goals.length === 0 && (
          <div className="text-center py-16">
            <div className="text-8xl mb-6">🎯</div>
            <h3 className="text-3xl font-bold text-white mb-4">No Goals Yet!</h3>
            <p className="text-xl text-white opacity-80 mb-8">
              Create your first goal to start your amazing fitness journey!
            </p>
          </div>
        )}
      </main>

      {/* New Goal Modal */}
      {showNewGoalModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-6 z-50">
          <div className="glass-effect p-8 rounded-3xl w-full max-w-md">
            <div className="text-center mb-6">
              <div className="text-4xl mb-2">🎯</div>
              <h3 className="text-2xl font-bold text-white">Create New Goal</h3>
            </div>

            <form onSubmit={handleCreateGoal} className="space-y-4">
              <div>
                <label className="block text-white font-medium mb-2">Goal Title</label>
                <input
                  type="text"
                  value={newGoal.title}
                  onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none"
                  placeholder="e.g., Lose 10kg in 3 months"
                  required
                />
              </div>

              <div>
                <label className="block text-white font-medium mb-2">Goal Type</label>
                <select
                  value={newGoal.type}
                  onChange={(e) => setNewGoal({ ...newGoal, type: e.target.value as Goal['type'] })}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white focus:border-cute-sky focus:outline-none"
                >
                  <option value="weight-loss">Weight Loss</option>
                  <option value="muscle-gain">Muscle Gain</option>
                  <option value="endurance">Endurance</option>
                  <option value="flexibility">Flexibility</option>
                  <option value="general-fitness">General Fitness</option>
                </select>
              </div>

              <div className="flex space-x-4">
                <div className="flex-1">
                  <label className="block text-white font-medium mb-2">Target Value</label>
                  <input
                    type="number"
                    value={newGoal.targetValue}
                    onChange={(e) => setNewGoal({ ...newGoal, targetValue: e.target.value })}
                    className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none"
                    placeholder="10"
                    required
                  />
                </div>
                <div className="w-24">
                  <label className="block text-white font-medium mb-2">Unit</label>
                  <select
                    value={newGoal.unit}
                    onChange={(e) => setNewGoal({ ...newGoal, unit: e.target.value })}
                    className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white focus:border-cute-sky focus:outline-none"
                  >
                    <option value="kg">kg</option>
                    <option value="lbs">lbs</option>
                    <option value="mins">mins</option>
                    <option value="reps">reps</option>
                    <option value="days">days</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-white font-medium mb-2">Deadline</label>
                <input
                  type="date"" />
            <rect x="46" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <rect x="51" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
          </svg>
        );
      case 'flexibility':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="25" r="12" fill="#ff6b9d" />
            <circle cx="46" cy="22" r="1.5" fill="white" />
            <circle cx="54" cy="22" r="1.5" fill="white" />
            <path d="M47 27 Q50 30 53 27" stroke="white" strokeWidth="1.5" fill="none" />
            <ellipse cx="50" cy="45" rx="10" ry="12" fill="#ffb347" />
            <path d="M35 40 Q40 35 45 42 Q50 50 45 58" stroke="#98fb98" strokeWidth="4" fill="none" />
            <path d="M65 40 Q60 35 55 42 Q50 50 55 58" stroke="#98fb98" strokeWidth="4" fill="none" />
            <ellipse cx="40" cy="70" rx="8" ry="4" fill="#87ceeb" transform="rotate(-30 40 70)" />
            <ellipse cx="60" cy="70" rx="8" ry="4" fill="#87ceeb" transform="rotate(30 60 70)" />
            <circle cx="50" cy="10" r="4" fill="#dda0dd" />
            <path d="M48 14 Q50 18 52 14" stroke="#dda0dd" strokeWidth="2" fill="none" />
          </svg>
        );
      case 'general-fitness':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="35" r="16" fill="#ff6b9d" />
            <circle cx="45" cy="31" r="2" fill="white" />
            <circle cx="55" cy="31" r="2" fill="white" />
            <path d="M46 38 Q50 42 54 38" stroke="white" strokeWidth="2" fill="none" />
            <rect x="42" y="50" width="16" height="20" rx="8" fill="#ffb347" />
            <rect x="37" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="57" y="48" width="6" height="16" rx="3" fill="#98fb98



            // ==============================================
// src/components/icons/CharacterIcons.tsx (COMPLETED)
// ==============================================
import React from 'react';

export const CuteRobotIcon = ({ className = "w-8 h-8" }: { className?: string }) => (
  <svg className={className} viewBox="0 0 100 100" fill="none">
    <circle cx="50" cy="40" r="25" fill="#ff6b9d" />
    <circle cx="43" cy="35" r="3" fill="white" />
    <circle cx="57" cy="35" r="3" fill="white" />
    <path d="M45 45 Q50 50 55 45" stroke="white" strokeWidth="2" fill="none" />
    <rect x="40" y="60" width="20" height="25" rx="5" fill="#ffb347" />
    <rect x="35" y="45" width="8" height="15" rx="4" fill="#98fb98" />
    <rect x="57" y="45" width="8" height="15" rx="4" fill="#98fb98" />
    <circle cx="35" cy="20" r="3" fill="#dda0dd" />
    <circle cx="65" cy="20" r="3" fill="#dda0dd" />
    <line x1="38" y1="20" x2="42" y2="30" stroke="#dda0dd" strokeWidth="2" />
    <line x1="62" y1="20" x2="58" y2="30" stroke="#dda0dd" strokeWidth="2" />
  </svg>
);

export const FitnessCharacterIcon = ({ type, className = "w-12 h-12" }: { type: string, className?: string }) => {
  const getCharacter = () => {
    switch (type) {
      case 'weight-loss':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <ellipse cx="50" cy="35" rx="18" ry="20" fill="#ff6b9d" />
            <circle cx="44" cy="30" r="2" fill="white" />
            <circle cx="56" cy="30" r="2" fill="white" />
            <path d="M46 38 Q50 42 54 38" stroke="white" strokeWidth="2" fill="none" />
            <ellipse cx="50" cy="65" rx="15" ry="20" fill="#ffb347" />
            <rect x="35" y="50" width="6" height="20" rx="3" fill="#98fb98" />
            <rect x="59" y="50" width="6" height="20" rx="3" fill="#98fb98" />
            <rect x="45" y="80" width="4" height="12" rx="2" fill="#87ceeb" />
            <rect x="51" y="80" width="4" height="12" rx="2" fill="#87ceeb" />
            <circle cx="35" cy="25" r="2" fill="#dda0dd" />
            <path d="M37 25 Q42 20 45 28" stroke="#dda0dd" strokeWidth="1.5" fill="none" />
          </svg>
        );
      case 'muscle-gain':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="35" r="18" fill="#ff6b9d" />
            <circle cx="45" cy="30" r="2" fill="white" />
            <circle cx="55" cy="30" r="2" fill="white" />
            <path d="M47 38 Q50 41 53 38" stroke="white" strokeWidth="2" fill="none" />
            <ellipse cx="50" cy="65" rx="20" ry="18" fill="#ffb347" />
            <ellipse cx="32" cy="55" rx="8" ry="12" fill="#98fb98" />
            <ellipse cx="68" cy="55" rx="8" ry="12" fill="#98fb98" />
            <rect x="46" y="80" width="8" height="15" rx="4" fill="#87ceeb" />
            <circle cx="30" cy="45" r="4" fill="#dda0dd" />
            <circle cx="70" cy="45" r="4" fill="#dda0dd" />
          </svg>
        );
      case 'endurance':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="30" r="15" fill="#ff6b9d" />
            <circle cx="46" cy="27" r="2" fill="white" />
            <circle cx="54" cy="27" r="2" fill="white" />
            <path d="M47 32 Q50 35 53 32" stroke="white" strokeWidth="1.5" fill="none" />
            <ellipse cx="50" cy="55" rx="12" ry="15" fill="#ffb347" />
            <rect x="38" y="45" width="5" height="18" rx="2.5" fill="#98fb98" transform="rotate(-15 40.5 54)" />
            <rect x="57" y="45" width="5" height="18" rx="2.5" fill="#98fb98" transform="rotate(15 59.5 54)" />
            <rect x="46" y="68" width="4" height="15" rx="2" fill="#87ceeb" transform="rotate(-10 48 75.5)" />
            <rect x="50" y="68" width="4" height="15" rx="2" fill="#87ceeb" transform="rotate(10 52 75.5)" />
            <circle cx="45" cy="15" r="3" fill="#98fb98" />
            <circle cx="55" cy="15" r="3" fill="#98fb98" />
            <path d="M45 18 Q50 25 55 18" stroke="#98fb98" strokeWidth="2" fill="none" />
          </svg>
        );
      case 'flexibility':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="25" r="12" fill="#ff6b9d" />
            <circle cx="46" cy="22" r="1.5" fill="white" />
            <circle cx="54" cy="22" r="1.5" fill="white" />
            <path d="M47 27 Q50 30 53 27" stroke="white" strokeWidth="1.5" fill="none" />
            <ellipse cx="50" cy="45" rx="10" ry="12" fill="#ffb347" />
            <path d="M35 40 Q40 35 45 42 Q50 50 45 58" stroke="#98fb98" strokeWidth="4" fill="none" />
            <path d="M65 40 Q60 35 55 42 Q50 50 55 58" stroke="#98fb98" strokeWidth="4" fill="none" />
            <ellipse cx="40" cy="70" rx="8" ry="4" fill="#87ceeb" transform="rotate(-30 40 70)" />
            <ellipse cx="60" cy="70" rx="8" ry="4" fill="#87ceeb" transform="rotate(30 60 70)" />
            <circle cx="50" cy="10" r="4" fill="#dda0dd" />
            <path d="M48 14 Q50 18 52 14" stroke="#dda0dd" strokeWidth="2" fill="none" />
          </svg>
        );
      case 'general-fitness':
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="35" r="16" fill="#ff6b9d" />
            <circle cx="45" cy="31" r="2" fill="white" />
            <circle cx="55" cy="31" r="2" fill="white" />
            <path d="M46 38 Q50 42 54 38" stroke="white" strokeWidth="2" fill="none" />
            <rect x="42" y="50" width="16" height="20" rx="8" fill="#ffb347" />
            <rect x="37" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="57" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="46" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <rect x="51" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <circle cx="45" cy="18" r="2" fill="#dda0dd" />
            <circle cx="55" cy="18" r="2" fill="#dda0dd" />
            <path d="M45 20 Q50 15 55 20" stroke="#dda0dd" strokeWidth="2" fill="none" />
          </svg>
        );
      default:
        return (
          <svg className={className} viewBox="0 0 100 100" fill="none">
            <circle cx="50" cy="35" r="16" fill="#ff6b9d" />
            <circle cx="45" cy="31" r="2" fill="white" />
            <circle cx="55" cy="31" r="2" fill="white" />
            <path d="M46 38 Q50 42 54 38" stroke="white" strokeWidth="2" fill="none" />
            <rect x="42" y="50" width="16" height="20" rx="8" fill="#ffb347" />
            <rect x="37" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="57" y="48" width="6" height="16" rx="3" fill="#98fb98" />
            <rect x="46" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <rect x="51" y="70" width="3" height="12" rx="1.5" fill="#87ceeb" />
            <circle cx="45" cy="18" r="2" fill="#dda0dd" />
            <circle cx="55" cy="18" r="2" fill="#dda0dd" />
            <path d="M45 20 Q50 15 55 20" stroke="#dda0dd" strokeWidth="2" fill="none" />
          </svg>
        );
    }
  };

  return getCharacter();
};

// ==============================================
// src/app/home/page.tsx (FIXED - Complete the deadline input)
// ==============================================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { CuteRobotIcon, FitnessCharacterIcon } from '@/components/icons/CharacterIcons';
import { Goal } from '@/types/fitness';

export default function HomePage() {
  const [user, setUser] = useState<any>(null);
  const [goals, setGoals] = useState<Goal[]>([]);
  const [showNewGoalModal, setShowNewGoalModal] = useState(false);
  const [newGoal, setNewGoal] = useState({
    title: '',
    type: 'weight-loss' as Goal['type'],
    targetValue: '',
    unit: 'kg',
    deadline: '',
  });
  const router = useRouter();

  useEffect(() => {
    // Check authentication
    const userData = localStorage.getItem('gymmy_user');
    if (!userData) {
      router.push('/auth');
      return;
    }
    
    setUser(JSON.parse(userData));
    
    // Load existing goals
    const savedGoals = localStorage.getItem('gymmy_goals');
    if (savedGoals) {
      setGoals(JSON.parse(savedGoals));
    }
  }, [router]);

  const handleCreateGoal = (e: React.FormEvent) => {
    e.preventDefault();
    
    const goal: Goal = {
      id: Date.now().toString(),
      title: newGoal.title,
      type: newGoal.type,
      targetValue: parseFloat(newGoal.targetValue),
      currentValue: 0,
      unit: newGoal.unit,
      deadline: new Date(newGoal.deadline),
      createdAt: new Date(),
      isCompleted: false,
      points: getPointsForGoalType(newGoal.type),
    };

    const updatedGoals = [goal, ...goals];
    setGoals(updatedGoals);
    localStorage.setItem('gymmy_goals', JSON.stringify(updatedGoals));
    
    // Reset form
    setNewGoal({
      title: '',
      type: 'weight-loss',
      targetValue: '',
      unit: 'kg',
      deadline: '',
    });
    setShowNewGoalModal(false);
  };

  const getPointsForGoalType = (type: Goal['type']): number => {
    const pointsMap = {
      'weight-loss': 100,
      'muscle-gain': 120,
      'endurance': 90,
      'flexibility': 80,
      'general-fitness': 85,
    };
    return pointsMap[type];
  };

  const getGoalTypeLabel = (type: Goal['type']): string => {
    const labels = {
      'weight-loss': 'Weight Loss',
      'muscle-gain': 'Muscle Gain',
      'endurance': 'Endurance',
      'flexibility': 'Flexibility',
      'general-fitness': 'General Fitness',
    };
    return labels[type];
  };

  const getProgressPercentage = (goal: Goal): number => {
    if (goal.targetValue === 0) return 0;
    return Math.min((goal.currentValue / goal.targetValue) * 100, 100);
  };

  const getDaysRemaining = (deadline: Date): number => {
    const today = new Date();
    const timeDiff = deadline.getTime() - today.getTime();
    return Math.ceil(timeDiff / (1000 * 3600 * 24));
  };

  const updateGoalProgress = (goalId: string, newValue: number) => {
    const updatedGoals = goals.map(goal => {
      if (goal.id === goalId) {
        const updatedGoal = { ...goal, currentValue: newValue };
        if (newValue >= goal.targetValue) {
          updatedGoal.isCompleted = true;
          // Add points to user
          const updatedUser = { ...user, totalPoints: (user.totalPoints || 0) + goal.points };
          setUser(updatedUser);
          localStorage.setItem('gymmy_user', JSON.stringify(updatedUser));
        }
        return updatedGoal;
      }
      return goal;
    });
    setGoals(updatedGoals);
    localStorage.setItem('gymmy_goals', JSON.stringify(updatedGoals));
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-cute-pink via-cute-peach to-cute-lavender flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-white"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-cute-pink via-cute-peach to-cute-lavender">
      {/* Floating Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-10 w-16 h-16 bg-cute-mint rounded-full opacity-20 animate-bounce-soft"></div>
        <div className="absolute top-40 right-20 w-12 h-12 bg-cute-sky rounded-full opacity-30 animate-pulse-slow"></div>
        <div className="absolute bottom-40 left-20 w-20 h-20 bg-white rounded-full opacity-15 animate-bounce-soft"></div>
        <div className="absolute bottom-20 right-10 w-14 h-14 bg-cute-lavender rounded-full opacity-25 animate-pulse-slow"></div>
      </div>

      {/* Header */}
      <header className="relative py-6 px-6 bg-white bg-opacity-10 backdrop-blur-lg">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <CuteRobotIcon className="w-12 h-12 animate-wiggle" />
            <div>
              <h1 className="text-2xl font-bold text-white font-cute">GymMy</h1>
              <p className="text-white opacity-80">Hey {user.name}! 👋</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-white">{user.totalPoints || 0}</div>
              <div className="text-white opacity-70 text-sm">Points</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-white">Level {user.level || 1}</div>
              <div className="text-white opacity-70 text-sm">Trainer</div>
            </div>
            <button
              onClick={() => {
                localStorage.removeItem('gymmy_user');
                localStorage.removeItem('gymmy_goals');
                router.push('/');
              }}
              className="bg-white bg-opacity-20 text-white px-4 py-2 rounded-full hover:bg-opacity-30 transition-all duration-300"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="relative max-w-7xl mx-auto px-6 py-8">
        {/* Welcome Section */}
        <div className="text-center mb-12">
          <h2 className="text-4xl md:text-6xl font-bold text-white mb-4 font-cute">
            Your Fitness Journey
          </h2>
          <p className="text-xl text-white opacity-90 mb-8">
            Ready to crush some goals today? Let's make it happen! 💪
          </p>
        </div>

        {/* New Goal Button */}
        <div className="mb-8">
          <button
            onClick={() => setShowNewGoalModal(true)}
            className="w-full glass-effect p-8 rounded-3xl border-2 border-dashed border-white border-opacity-40 hover:border-opacity-60 hover:bg-white hover:bg-opacity-10 transition-all duration-300 group"
          >
            <div className="text-center">
              <div className="text-6xl mb-4 group-hover:animate-bounce">✨</div>
              <h3 className="text-2xl font-bold text-white mb-2">Create New Goal</h3>
              <p className="text-white opacity-70">Start a new fitness adventure!</p>
            </div>
          </button>
        </div>

        {/* Goals Grid */}
        {goals.length > 0 && (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {goals.map((goal) => (
              <div
                key={goal.id}
                className="glass-effect p-6 rounded-3xl hover:scale-105 transition-all duration-300 cursor-pointer"
              >
                <div className="flex items-center justify-between mb-4">
                  <FitnessCharacterIcon type={goal.type} className="w-16 h-16" />
                  <div className="text-right">
                    <div className="text-2xl font-bold text-white">+{goal.points}</div>
                    <div className="text-white opacity-70 text-sm">points</div>
                  </div>
                </div>
                
                <h3 className="text-xl font-bold text-white mb-2">{goal.title}</h3>
                <p className="text-cute-sky font-medium mb-4">{getGoalTypeLabel(goal.type)}</p>
                
                {/* Progress Bar */}
                <div className="mb-4">
                  <div className="flex justify-between text-white text-sm mb-2">
                    <span>{goal.currentValue} / {goal.targetValue} {goal.unit}</span>
                    <span>{getProgressPercentage(goal).toFixed(1)}%</span>
                  </div>
                  <div className="w-full bg-white bg-opacity-20 rounded-full h-3">
                    <div
                      className="bg-cute-sky h-3 rounded-full transition-all duration-500"
                      style={{ width: `${getProgressPercentage(goal)}%` }}
                    ></div>
                  </div>
                </div>

                {/* Update Progress */}
                {!goal.isCompleted && (
                  <div className="mb-4">
                    <input
                      type="number"
                      placeholder={`Update progress (${goal.unit})`}
                      className="w-full px-3 py-2 rounded-lg bg-white bg-opacity-20 text-white placeholder-white placeholder-opacity-60 text-sm"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          const value = parseFloat((e.target as HTMLInputElement).value);
                          if (value >= 0) {
                            updateGoalProgress(goal.id, value);
                            (e.target as HTMLInputElement).value = '';
                          }
                        }
                      }}
                    />
                  </div>
                )}
                
                {/* Deadline */}
                <div className="flex items-center justify-between text-white opacity-70 text-sm">
                  <span>
                    {getDaysRemaining(new Date(goal.deadline)) > 0
                      ? `${getDaysRemaining(new Date(goal.deadline))} days left`
                      : 'Overdue'}
                  </span>
                  <span>{goal.isCompleted ? '✅ Completed' : '🎯 In Progress'}</span>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Empty State */}
        {goals.length === 0 && (
          <div className="text-center py-16">
            <div className="text-8xl mb-6">🎯</div>
            <h3 className="text-3xl font-bold text-white mb-4">No Goals Yet!</h3>
            <p className="text-xl text-white opacity-80 mb-8">
              Create your first goal to start your amazing fitness journey!
            </p>
          </div>
        )}
      </main>

      {/* New Goal Modal */}
      {showNewGoalModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-6 z-50">
          <div className="glass-effect p-8 rounded-3xl w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="text-center mb-6">
              <div className="text-4xl mb-2">🎯</div>
              <h3 className="text-2xl font-bold text-white">Create New Goal</h3>
            </div>

            <form onSubmit={handleCreateGoal} className="space-y-4">
              <div>
                <label className="block text-white font-medium mb-2">Goal Title</label>
                <input
                  type="text"
                  value={newGoal.title}
                  onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none"
                  placeholder="e.g., Lose 10kg in 3 months"
                  required
                />
              </div>

              <div>
                <label className="block text-white font-medium mb-2">Goal Type</label>
                <select
                  value={newGoal.type}
                  onChange={(e) => setNewGoal({ ...newGoal, type: e.target.value as Goal['type'] })}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white focus:border-cute-sky focus:outline-none"
                >
                  <option value="weight-loss">Weight Loss</option>
                  <option value="muscle-gain">Muscle Gain</option>
                  <option value="endurance">Endurance</option>
                  <option value="flexibility">Flexibility</option>
                  <option value="general-fitness">General Fitness</option>
                </select>
              </div>

              <div className="flex space-x-4">
                <div className="flex-1">
                  <label className="block text-white font-medium mb-2">Target Value</label>
                  <input
                    type="number"
                    value={newGoal.targetValue}
                    onChange={(e) => setNewGoal({ ...newGoal, targetValue: e.target.value })}
                    className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 focus:border-cute-sky focus:outline-none"
                    placeholder="10"
                    required
                  />
                </div>
                <div className="w-24">
                  <label className="block text-white font-medium mb-2">Unit</label>
                  <select
                    value={newGoal.unit}
                    onChange={(e) => setNewGoal({ ...newGoal, unit: e.target.value })}
                    className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white focus:border-cute-sky focus:outline-none"
                  >
                    <option value="kg">kg</option>
                    <option value="lbs">lbs</option>
                    <option value="mins">mins</option>
                    <option value="reps">reps</option>
                    <option value="days">days</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-white font-medium mb-2">Deadline</label>
                <input
                  type="date"
                  value={newGoal.deadline}
                  onChange={(e) => setNewGoal({ ...newGoal, deadline: e.target.value })}
                  className="w-full px-4 py-3 rounded-xl border-2 border-white border-opacity-20 bg-white bg-opacity-10 text-white focus:border-cute-sky focus:outline-none"
                  required
                />
              </div>

              <div className="flex space-x-4 pt-4">
                <button
                  type="button"
                  onClick={() => setShowNewGoalModal(false)}
                  className="flex-1 bg-white bg-opacity-20 text-white py-3 rounded-xl font-medium hover:bg-opacity-30 transition-all duration-300"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-cute-sky text-white py-3 rounded-xl font-medium hover:bg-opacity-90 transition-all duration-300"
                >
                  Create Goal 🎯
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

// ==============================================
// next.config.js
// ==============================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig

// ==============================================
// tsconfig.json
// ==============================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

// ==============================================
// Additional UI Components (Optional)
// ==============================================

// src/components/ui/Button.tsx
import React from 'react';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary', 
  size = 'md', 
  children, 
  className = '', 
  ...props 
}) => {
  const baseClasses = 'font-medium rounded-xl transition-all duration-300 hover:scale-105';
  
  const variantClasses = {
    primary: 'bg-cute-sky text-white hover:bg-opacity-90',
    secondary: 'bg-cute-pink text-white hover:bg-opacity-90',
    outline: 'border-2 border-white text-white hover:bg-white hover:text-cute-pink'
  };
  
  const sizeClasses = {
    sm: 'px-4 py-2 text-sm',
    md: 'px-6 py-3 text-base',
    lg: 'px-8 py-4 text-lg'
  };
  
  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses